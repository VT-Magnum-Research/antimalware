package org.vt.magnum.antimalware.main;

import java.util.Observable;
import java.util.Observer;

import org.vt.magnum.antimalware.features.WekaHelper;
import org.vt.magnum.antimalware.main.R;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.RadioGroup;

/**
 * The activity that initializes the service and controls the GUI.
 * @author Brandon Amos
 * @version 2012.08.10
 */
public class MalwareActivity extends Activity {
	private static final String TAG = "MalwareActivity";
	
	private RadioGroup _buttonGroup;
	
	private boolean _isTraining;
	private boolean _isBenign;
	
	private WekaHelper _wh;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        Log.d(TAG, "onCreate");
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        startService(new Intent(this, MalwareService.class));

        _buttonGroup = (RadioGroup) findViewById(R.id.classRadioGroup);
        
        _isTraining = true;
        _isBenign = true;

        //TODO: The Observer currently receives only one update...
        _wh = new WekaHelper();
        _wh.addObserver(new WekaObserver());
        
        if (_wh.getClassification().equals(""))
        _wh.writeClassification("positive");
    }
    
    public void trainingOnClick(View view) {
    	_isTraining = !_isTraining;
    	updateTrainingGUI();
    }
    
    public void radioOnClick( View view ) {
    	Log.i(TAG, "radioOnClick");
    	if ( _buttonGroup.getCheckedRadioButtonId() == R.id.benignRadio )
    		_wh.writeClassification("positive");
    	else
    		_wh.writeClassification("negative");
    }
    
    private void updateTrainingGUI() {
    	if (_isTraining) {
    		_buttonGroup.setVisibility(View.VISIBLE);
    		
    		if ( _isBenign )
    			_buttonGroup.check( R.id.benignRadio );
    		else
    			_buttonGroup.check( R.id.maliciousRadio );
    	}
    	else
    		_buttonGroup.setVisibility(View.INVISIBLE);
    }

    /**
     * Observes the WekaHelper class so that the GUI is updated
     * when the classification changes externally.
     */
    private class WekaObserver implements Observer {
    	public void update( Observable o, Object arg) {
    		String classification = (String) arg;
    		if ( classification.equals("positive") )
    			_isBenign = true;
    		else
    			_isBenign = false;
    		
    		updateTrainingGUI();
    	}
    }
}