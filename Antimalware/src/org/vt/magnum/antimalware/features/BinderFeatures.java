package org.vt.magnum.antimalware.features;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;

//TODO: Incomplete
/**
 * Gets binder features by parsing /proc/binder/stats.
 * @author Brandon Amos
 * @version 2012.08.10
 */
public class BinderFeatures implements IFeatures {
	private int _transaction;
	private int _reply;
	private int _acquire;
	private int _release;
	
	private int _activeNodes;
	private int _totalNodes;
	
	private int _activeRef;
	private int _totalRef;
	
	private int _activeDeath;
	private int _totalDeath;
	
	private int _activeTransaction;
	private int _totalTransaction;
	
	private int _activeTransactionComplete;
	private int _totalTransactionComplete;
	
	private int _totalNodesDiff;
	private int _totalRefDiff;
	private int _totalDeathDiff;
	private int _totalTransactionDiff;
	private int _totalTransactionCompleteDiff;
	
	private WekaHelper _wh;
	private FileParser _fp;
	private ArrayList<Attribute> _attributes;
	private Instance _instance;
	
	public BinderFeatures() {
		_wh = WekaHelper.getInstance();
		_fp = new FileParser();
		_attributes = _wh.createNumAttributeList(
				"binderTransaction", "binderReply", "binderAcquire", "binderRelease",
				"binderActiveNodes", "binderTotalNodes", "binderActiveRef",
				"binderTotalRef", "binderActiveDeath", "binderTotalDeath",
				"binderActiveTransaction", "binderTotalTransaction",
				"binderActiveTransactionComplete", "binderTotalTransactionComplete",
				"binderTotalNodesDiff", "binderTotalRefDiff", "binderTotalDeathDiff",
				"binderTotalTransactionDiff", "binderTotalTransactionCompleteDiff");
	}
	
	public void fetchData() {
		try
	    {
			int totalNodes = 0;
			int totalRef = 0;
			int totalDeath = 0;
			int totalTransaction = 0;
			int totalTransactionComplete = 0;
			
			// Devices with kernel 3 have /sys/kernel/debug/binder/stats
			// while devices with kernel 2 have /proc/binder/stats
			try {
				_fp.load("/sys/kernel/debug/binder/stats");
			} catch (FileNotFoundException e) {
				_fp.load( "/proc/binder/stats" );
			}
			
			_transaction = _fp.readInt( 1, 1 );
			_reply = _fp.readInt( 2, 1 );
			
			_acquire = _fp.readInt( 5, 1 );
			_release = _fp.readInt( 6, 1 );
			
			_activeNodes = _fp.readInt( 24, 2 );
			totalNodes = _fp.readInt( 24, 4 );
			
			_activeRef = _fp.readInt( 25, 2 );
			totalRef = _fp.readInt( 25, 4 );
			
			_activeDeath = _fp.readInt( 26, 2 );
			totalDeath = _fp.readInt( 26, 4 );
			
			_activeTransaction = _fp.readInt( 27, 2 );
			totalTransaction = _fp.readInt( 27, 4 );
			
			_activeTransactionComplete = _fp.readInt( 28, 2 );
			totalTransaction = _fp.readInt( 28, 4 ); 
			
			_fp.close();
        	
        	_totalNodesDiff = totalNodes - _totalNodes;
        	_totalNodes = totalNodes;
        	
        	_totalRefDiff = totalRef - _totalRef;
        	_totalRef = totalRef;
        	
        	_totalDeathDiff = totalDeath - _totalDeath;
        	_totalDeath = totalDeath;
        	
        	_totalTransactionDiff = totalTransaction - _totalTransaction;
        	_totalTransaction = totalTransaction;
        	
        	_totalTransactionCompleteDiff = 
        			totalTransactionComplete - _totalTransactionComplete; 
        	_totalTransactionComplete = totalTransactionComplete;
	    }
	    catch( Exception ex )
	    {
	        ex.printStackTrace();           
	    }
	}
	
	public Instance getInstance() {
		fetchData();
		
		_wh.resetAttributes(_attributes);
		
		_instance = new DenseInstance(_attributes.size());
		
		_wh.setInstance(_instance, _attributes,
				_transaction, _reply, _acquire, _release,
				_activeNodes, _totalNodes, _activeRef, _totalRef,
				_activeDeath, _totalDeath, _activeTransaction, _totalTransaction,
				_activeTransactionComplete, _totalTransactionComplete,
				_totalNodesDiff, _totalRefDiff, _totalDeathDiff, _totalTransactionDiff,
				_totalTransactionCompleteDiff);
	
		return _instance;
	}
	
	public ArrayList<Attribute> getAttributes() {
		return _attributes;
	}

}
