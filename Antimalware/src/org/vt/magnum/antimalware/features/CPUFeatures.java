package org.vt.magnum.antimalware.features;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;

//TODO: Incomplete
/**
 * Gets CPU features by parsing /proc/stat.
 * @author Brandon Amos
 * @version 2012.08.10
 */
public class CPUFeatures implements INormalFeatures {
	private long _total = 0;
	private long _idle = 0;
	private double _usage = 0;
	
	private ArrayList<Attribute> _attributes;
	private Instance _instance;
	
	private WekaHelper _wh;
	
	public CPUFeatures() {
		_wh = WekaHelper.getInstance();
		_attributes = new ArrayList<Attribute>();
		
		// Create the feature vector		
		_attributes.addAll(_wh.createNumAttributeList(
				"cpuUsage"));
	}
	
	// http://stackoverflow.com/questions/3118234/how-to-get-memory-usage-and-cpu-usage-in-android
	public double getUsage() {
		return _usage;
	}
	
	public void fetchUsage()
	{
	    try
	    {
	        BufferedReader reader = new BufferedReader( new FileReader( "/proc/stat" ) );

	        String load = reader.readLine();
	        reader.close();     

	        String[] toks = load.split(" ");

	        long currTotal = Long.parseLong(toks[2]) + Long.parseLong(toks[3]) + Long.parseLong(toks[4]);
	        long currIdle = Long.parseLong(toks[5]);

	        _usage = (currTotal - _total) * 100.0f / (currTotal - _total + currIdle - _idle);
	        _total = currTotal;
	        _idle = currIdle;
	    }
	    catch( IOException ex )
	    {
	        ex.printStackTrace();           
	    }
	}
	
	public void fetchData() {
		fetchUsage();
	}
	
	public Instance getInstance() {
		fetchData();
		
		_wh.resetAttributes(_attributes);
		
		_instance = new DenseInstance(_attributes.size());
		_instance.setValue(_attributes.get(0), _usage);
	
		return _instance;
	}
	
	public ArrayList<Attribute> getAttributes() {
		return _attributes;
	}
}
