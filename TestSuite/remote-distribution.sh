#!/bin/sh
#
# remote-distribution.sh
# Distributes the test suite to remote servers for data collection.
# 
# Brandon Amos
# 2012.10.10

trap handleInt INT

# partitionDir <Testing/Training> <Number of Partitions>
function partitionDir {
    partitions=$2
    
    echo "Partitioning $1 into $partitions subdirectories"
    
    cd $1
    numFiles=`ls *apk | wc -l`
    let 'partitionSize = (numFiles + partitions - 1)/partitions' # Ceiling

    for ((i=1; i<=$partitions; i++)); do
        partDir="partition$i"
        mkdir -p $partDir
        for file in $(ls *apk | head -$partitionSize); do
             mv $file $partDir/
        done
    done
    
    cd ..
}

# unpartitionDir <Testing/Training>
function unpartitionDir {
    cd $1
    
    echo Unpartitioning $1
    
    for file in $(find . -name '*apk'); do
        mv $file .
    done

    rm -rf partition* 
    cd ..
}

function handleInt {
    #unpartitionDir $MODE
    pkill collect-data;
    pkill weka.sh;
}

# createDirectory <partition>
function createDirectory {
    echo Creating a directory for device $1

    partition=$1
    mkdir -p Nodes/$partition

    cp -r ../Antimalware Nodes/$partition
    cp -r $MODE/$partition Nodes/$partition/Remote
    cp -r Device-Images/ Nodes/$partition
    cp collect-data* Nodes/$partition
    mkdir -p Nodes/$partition/arff Nodes/$partition/AVDs

    echo Creating tar
    cd Nodes
    tar cf $partition.tar $partition
    cd ..
}

function initializeServers {
    i=1;
    for server in "${servers[@]}"; do
        partition=partition$i
        createDirectory $partition

        echo Sending tar to $server
        scp Nodes/$partition.tar $server:~
        ssh $server \
            "tar xf $partition.tar;
             rm $partition.tar;
             cd $partition;
             ./collect-data.sh Remote"
        let 'i+=1'
    done
}

#########
# Start #
#########

if [[ $# != 1 || ( $1 != "Training" && $1 != "Testing" ) ]]; then
    echo "Usage: ./collect-data.sh <Testing/Training>"
    exit 1
fi

echo Preparing directories
rm -rf ./logs/* ./Nodes/*
mkdir -p logs

MODE=$1

# Servers sharing ssh public/private keys with you
declare -a servers=('ataack');
let "partitions = ${#servers[@]}"

partitionDir $MODE $partitions

EMULATORS=2 # No more than 15!

initializeServers

# Wait for all of the backgrounded scripts to finish
wait ${!}

unpartitionDir $MODE


exit 0
