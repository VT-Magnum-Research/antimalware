#!/bin/bash
#
# remote-distribution.sh
# Distributes the test suite to remote servers for data collection.
# 
# Brandon Amos
# 2012.10.10

source helper.sh
trap handleInt INT

function handleInt {
    unpartitionDir $MODE
    pkill collect-data;
    pkill weka.sh;
    pkill helper.sh;
}

# createDirectory <partition>
function createDirectory {
    msg "Creating a directory for $1"

    partition=$1

    mkdir -p Nodes/$partition Nodes/$partition/arff Nodes/$partition/AVDs

    cp -r ../Antimalware Nodes/$partition
    cp -r $MODE/$partition Nodes/$partition/Remote
    cp -r Device-Images/ Nodes/$partition
    cp collect-data* Nodes/$partition
    cp helper.sh Nodes/$partition
    cp AVDs/sdcard.img Nodes/$partition/AVDs

    msg "Creating tgz for $partition"
    cd Nodes
    tar czf $partition.tgz $partition
    cd ..
}

# sendToServer <partition number> <server>
function sendToServer {
    local partition=partition$1
    local server=$2
    createDirectory $partition

    msg Sending $partition to $server
    scp Nodes/$partition.tgz $server:~
    ssh $server \
        "PATH=/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/brandon/bin:/home/brandon/bin/android-sdk-linux/platform-tools:/home/brandon/bin/android-sdk-linux/tools:/home/brandon/bin/jre1.7/bin;
         rm -rf $partition;
         tar xzf $partition.tgz;
         rm $partition.tgz;
         cd $partition;
         ./collect-data-remote.sh $EMULATORS"
}

function initializeServers {
    i=1;
    for server in "${servers[@]}"; do
        sendToServer $i $server | tee logs/$server.log &
        let 'i+=1'
    done
}

# retrieveFromServer <partition number> <server>
function retrieveFromServer {
    local partition=partition$1
    local server=$2

    msg "Obtaining arff from $server ($partition)"
    ssh $server \
        "cd $partition;
         tar czf arff.tgz arff"
    scp $server:~/$partition/arff.tgz ../arff/$partition-arff.tgz

    msg Cleaning up $server
    ssh $server "rm -rf $partition;"
}

function fetchAndCleanServers {
    msg Fetching and cleaning up servers
    i=1;
    for server in "${servers[@]}"; do
        retrieveFromServer $i $server &
        let 'i+=1'
    done
}

#########
# Start #
#########

if [[ $# != 1 || ( $1 != "Training" && $1 != "Testing" ) ]]; then
    msg "Usage: ./remote-distribution.sh <Mode>"
    exit 1
fi

msg Preparing directories
rm -rf ./logs/* ./Nodes/*
mkdir -p logs

MODE=$1
EMULATORS=1 # No more than 15!

# Servers with shared ssh keys
declare -a servers=('10.0.2.1' '10.0.2.2');
let "partitions = ${#servers[@]}"

partitionDir $MODE $partitions
initializeServers
wait ${!}
fetchAndCleanServers

exit 0
