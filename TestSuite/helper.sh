#!/bin/bash
#
# helper.sh
# Provides extra functionality. 
#
# Brandon Amos
# 2012.11.22

##########
# Output #
##########
HOSTNAME=`hostname`
function msg {
    echo "[$HOSTNAME] $@"
}

function die {
    EXIT=$1; shift;
    msg $@
    exit $EXIT
}

function cd_dir {
    cd "$@" &> /dev/null \
        || die 1 "Could not change the directory to $@"
}

##############
# Key events #
##############
ADB_MENU=1
ADB_BACK=4
ADB_UP=19
ADB_DOWN=20
ADB_RIGHT=22
ADB_CLICK=23
ADB_POWER=26

# sendKey <keyevent> <repetitions>
function sendKey {
    EVENT=$1
    REPS=$2

    for (( i=0; i<$REPS; i++ )); do
        $ADB shell input keyevent $EVENT
    done
}

#####################
# Application Level #
#####################
# monkeyTest <apk name> <delay>
function monkeyTest {
    if [[ $1 == *.apk ]]; then # System apps: *.sysapk
        msg Installing application $1
        $ADBTIMEOUT install $1
    fi

    startAntimalware $1

    package=`aapt dump badging $1 | 
        grep -o "package: name='[^']*'" |
        cut -f2 -d \'`

    msg Monkey testing application $package
      # For delays: --throttle $2 \
    $ADB shell monkey -p $package \
      --pct-syskeys 0 \
      --pct-anyevent 0 \
      -s `date +%s` \
      10000

    stopAntimalware $1    

    if [[ $1 == *.apk ]]; then
        msg Uninstalling package $package
        $ADBTIMEOUT uninstall $package
    fi
}

# startAntimalware <apk name> 
function startAntimalware {
    msg Starting the antimalware application
    $ADBTIMEOUT shell am start -a android.intent.action.MAIN \
        -n org.vt.magnum.antimalware.main/.MalwareActivity

    sleep 5

    if [[ $1 == $MODE/partition$PARTITION/M* ]]; then
        CLASS=negative
    else
        CLASS=positive
    fi

    msg Setting the classification to $CLASS
    $ADBTIMEOUT shell "echo $CLASS > /sdcard/magnum/classification"
}

# stopAntimalware <apk name> 
function stopAntimalware {
    msg "Pulling the arff for $1"
    if [[ $MODE == "Remote" ]]; then
        $ADB pull /sdcard/magnum/malware.arff ./arff/$1.arff
    else
        $ADB pull /sdcard/magnum/malware.arff ../arff/$1.arff
    fi

    msg Stopping the antimalware application
    $ADBTIMEOUT shell am force-stop "org.vt.magnum.antimalware.main"
}

###################
# Framework Level #
###################
# partitionDir <Mode> <Number of Partitions>
function partitionDir {
    partitions=$2
    
    msg "Partitioning $1 into $partitions subdirectories"
    
    cd_dir $1
    numFiles=`ls *apk | wc -l`
    let 'partitionSize = (numFiles + partitions - 1)/partitions' # Ceiling

    for ((i=1; i<=$partitions; i++)); do
        partDir="partition$i"
        mkdir -p $partDir
        for file in $(ls *apk | head -$partitionSize); do
             mv $file $partDir/
        done
    done
    
    cd_dir ..
}

# unpartitionDir <Mode>
function unpartitionDir {
    cd_dir $1
    msg Unpartitioning $1
    find . -name '*apk' -exec mv {} . \;
    rm -rf partition* 
    cd_dir ..
}


# Gather the separately collected arff files.
function gatherArff {
    msg Combining and archiving the arff files

    if [[ $1 == "Remote" ]]; then
        cd_dir $MODE
    else
        cd_dir ../arff/$MODE
    fi
    mv ../$MODE.arff . &> /dev/null

    msg Getting the header from a random arff file
    sed '1,/@data/!d' `find . -name '*.arff' | head -1` > tmpTotal.txt

    msg Looping through arff files to combine them
    for file in $(find . -name '*.arff'); do
        sed '1,/@data/d' $file > tmpArff.txt # Delete the header
        sed '1d' tmpArff.txt >> tmpTotal.txt # Delete first line
        echo >> tmpTotal.txt
    done

    msg Removing and cleaning
    rm -f tmpArff.txt $MODE.arff
    mv tmpTotal.txt ../$MODE.arff
    cd_dir ..
}
