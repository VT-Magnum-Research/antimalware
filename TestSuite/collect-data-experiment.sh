#!/bin/bash
#
# collect-data-emulator.sh
# Installs, tests, and uninstalls apks for malware analysis on
# an emulated device. 
#
# Brandon Amos
# 2012.09.30

##########
# Output #
##########
function msg {
    echo " + $@"
}

function die {
    msg $2
    exit $1
}

##############
# Key events #
##############
ADB_MENU=1
ADB_BACK=4
ADB_UP=19
ADB_DOWN=20
ADB_RIGHT=22
ADB_CLICK=23
ADB_POWER=26

# sendKey <keyevent> <repetitions>
function sendKey {
    EVENT=$1
    REPS=$2

    for (( i=0; i<$REPS; i++ )); do
        $ADB shell input keyevent $EVENT
    done
}

# startAntimalware <apk name> 
function startAntimalware {
    msg Starting the antimalware application
    adbTimeout shell am start -a android.intent.action.MAIN \
        -n org.vt.magnum.antimalware.main/.MalwareActivity

    sleep 5

    if [[ $1 == $MODE/M* ]]; then
        CLASS=negative
    else
        CLASS=positive
    fi

    msg Setting the classification to $CLASS
    adbTimeout shell "echo $CLASS > /sdcard/magnum/classification"
}

# stopAntimalware <apk name> 
function stopAntimalware {
    msg "Pulling the arff for $1"
    $ADB pull /sdcard/magnum/malware.arff ./experiment.arff

    msg Stopping the antimalware application
    adbTimeout shell am force-stop "org.vt.magnum.antimalware.main"
}

###################
# Framework Level #
###################
# partitionDir <Mode> <Number of Partitions>
function partitionDir {
    partitions=$2
    
    msg "Partitioning $1 into $partitions subdirectories"
    
    cd_dir $1
    numFiles=`ls *apk | wc -l`
    let 'partitionSize = (numFiles + partitions - 1)/partitions' # Ceiling

    for ((i=1; i<=$partitions; i++)); do
        partDir="partition$i"
        mkdir -p $partDir
        for file in $(ls *apk | head -$partitionSize); do
             mv $file $partDir/
        done
    done
    
    cd_dir ..
}

# unpartitionDir <Mode>
function unpartitionDir {
    cd_dir $1
    
    msg Unpartitioning $1
    
    for file in $(find . -name '*apk'); do
        mv $file .
    done

    rm -rf partition* 
    cd_dir ..
}

function adbTimeout {
    timeout 60 $ADB $@
    if [[ $? != 0 ]]; then
        msg "Command '$ADB $@' timed out.
        Restarting emulator and retrying"
        restartEmulator
        adbTimeout $@
    fi
}

function monkeyTest {
    if [[ $1 == *.apk ]]; then # System apps: *.sysapk
        msg Installing application $1
        adbTimeout install $1
    fi

    startAntimalware $1

    package=`aapt dump badging $1 | 
        grep -o "package: name='[^']*'" |
        cut -f2 -d \'`

    msg Monkey testing application $package
    $ADB shell monkey -p $package \
      --throttle $2 \
      --pct-syskeys 0 \
      --pct-anyevent 0 \
      -s 0 \
      100000

    stopAntimalware $1    

    if [[ $1 == *.apk ]]; then
        msg Uninstalling package $package
        adbTimeout uninstall $package
    fi
}


function createAVD {
    android create avd -n $SERIAL \
        -t "Google Inc.:Google APIs:16" \
        -p AVDs/$SERIAL --skin HVGA \
        --force
    cp AVDs/sdcard.img AVDs/$SERIAL/
}

function testBenign {
    ls $MODE/B*apk | while read APPLICATION; do
        monkeyTest $APPLICATION $DELAY
    done
}

#########
# Start #
#########

if [[  $1 != "Training" && $1 != "Testing" && $1 != "Remote" ]]; then
    msg "Usage: ./collect-data-emulator.sh <Mode>
           <port number> <partition number>"
    exit 1
fi

msg Setting the mode to $1 for emulator-$2
MODE=$1
PORT=$2
SERIAL=emulator-$PORT
PARTITION=$3

ADB="adb"

msg Setting the event delay to 450 milliseconds
DELAY=450 # Random: $(( ($RANDOM % 1501) + 250 ))

testBenign

exit 0
