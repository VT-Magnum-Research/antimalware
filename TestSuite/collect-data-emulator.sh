#!/bin/sh
#
# collect-data-emulator.sh
# Installs, tests, and uninstalls apks for malware analysis on
# an emulated device. 
#
# Brandon Amos
# 2012.09.30

# Key events
MENU=1
BACK=4
UP=19
DOWN=20
RIGHT=22
CLICK=23

# sendKey <keyevent> <repetitions>
function sendKey {
    EVENT=$1
    REPS=$2

    for (( i=0; i<$REPS; i++ )); do
        $ADB shell input keyevent $EVENT
    done
}

# installAndMonkeyTest <apk name> <delay>
function monkeyTest {
    # System applications that don't need to be installed
    # are passed to this without the .apk extension
    if [[ $1 == *.apk ]]; then
        echo Installing application $1
        $ADB install $1
    fi

    startAntimalware $1

    package=`aapt dump badging $1 | 
        grep -o "package: name='[^']*'" |
        cut -f2 -d \'`

    echo Monkey testing application $package
    $ADB shell monkey -p $package \
      --throttle $2 \
      --pct-syskeys 0 \
      --pct-anyevent 0 \
      -s `date +%s` \
      1200

    stopAntimalware $1
    
    if [[ $1 == *.apk ]]; then
        echo Uninstalling package $package
        timeout 20 $ADB uninstall $package
    fi
}

# startAntimalware <apk name>
function startAntimalware {
    echo Starting the antimalware application
    $ADB shell am start -a android.intent.action.MAIN \
        -n org.vt.magnum.antimalware.main/.MalwareActivity

    # Let the application start 
    sleep 5

    # Detect the classification from the name
    if [[ $1 == $MODE/partition$PARTITION/M* ]]; then
        CLASS=negative
    else
        CLASS=positive
    fi

    echo Setting the classification to $CLASS
    $ADB shell "echo $CLASS > /sdcard/magnum/classification"
}

# Stops the antimalware application and pulls the arff file
# stopAntimalware <apk name>
function stopAntimalware {
    echo Pulling the arff for $1
    $ADB pull /sdcard/magnum/malware.arff ../arff/$1.arff

    echo Stopping the antimalware application
    $ADB shell am force-stop "org.vt.magnum.antimalware.main"
}

function createAVD {
    android create avd -n $SERIAL \
        -t "Google Inc.:Google APIs:16" \
        -p AVDs/$SERIAL --skin HVGA \
        --force
    cp AVDs/sdcard.img AVDs/$SERIAL/
}

function restartEmulator {
    $ADB emu kill
    
    emulator-arm -port $PORT -avd $SERIAL \
        -sdcard AVDs/$SERIAL/sdcard.img \
        -noaudio -wipe-data \
        -no-boot-anim -no-window \
        -no-snapshot -http-proxy 0.0.0.0:0 &
    
    
    $ADB wait-for-device
    $ADB logcat | grep -q -m 1 "Boot is finished"
    
    echo "Importing contacts"
    $ADB shell am start -a android.intent.action.MAIN \
        -n com.android.contacts/.activities.PeopleActivity
    timeout 20 $ADB logcat | grep -q -m 1 "Displayed com.android.contacts"
    sendKey $DOWN 3
    sendKey $CLICK 1
    sendKey $DOWN 3
    sendKey $CLICK 1
    sendKey $DOWN 1
    sendKey $CLICK 1
    sendKey $BACK 1
    sleep 5
    exit 42
    echo "Syncing Google Account"
    $ADB shell am start -a android.intent.action.MAIN \
        -n com.android.settings/.Settings
    sendKey $DOWN 16
    sendKey $CLICK 1
    sendKey $DOWN 3
    sendKey $CLICK 1
    sleep 10
    sendKey $CLICK 1
    $ADB shell input text "magnum.antimalware@gmail.com"
    sendKey $DOWN 1
    $ADB shell input text "antimalware"
    sendKey $RIGHT 2
    sendKey $CLICK 1
    sendKey $RIGHT 4
    sendKey $CLICK 1
    timeout 20 $ADB logcat | grep -q -m 1 "Checkin success"
    sendKey $DOWN 2
    sendKey $CLICK 1
    
    exit 42
}

function deleteAVD {
    $ADB emu kill
    android delete avd -n $SERIAL
}

#########
# Start #
#########

if [[ $# != 3 || ( $1 != "Training" && $1 != "Testing" ) ]]; then
    echo "Usage: ./collect-data-emulator.sh <Testing/Training>
           <port number> <partition number>"
    exit 1
fi

echo Setting the mode to $1 for emulator-$2
MODE=$1
PORT=$2
SERIAL=emulator-$PORT
PARTITION=$3

ADB="adb -s $SERIAL "
FASTBOOT="fastboot -s $SERIAL "

createAVD
# The emulator is started in the loop below

echo Setting the event delay to 450 milliseconds
#delay=$(( ($RANDOM % 1501) + 250 ))
DELAY=450
COUNT=0;

# System applications have a .sysapk extension so
# this script won't reinstall them.
# (This was done to easily manage the system applications)
ls $MODE/partition$PARTITION/*apk | sort -R | while read APPLICATION; do
    # Reflash the device every 10 applications
    if (( COUNT % 10 == 0 )); then
        restartEmulator

        echo Installing the antimalware application
        $ADB install ../Antimalware/bin/Antimalware.apk
    fi;

    let COUNT=COUNT+1
    monkeyTest $APPLICATION $DELAY
done

$ADB emu kill

exit 0
