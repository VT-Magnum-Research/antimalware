package org.vt.magnum.antimalware.features;

import java.util.ArrayList;
import java.util.List;

import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;

/**
 * Gets permission information.
 * @author Brandon Amos
 */
public class PermissionFeatures implements IFeatures {
	private PackageManager _packageManager;
	private List<RunningAppProcessInfo> _processes;
	
	private int _permissions;
	
	private ArrayList<Attribute> _attributes;
	private Instance _instance;
	
	private WekaHelper _wh;
	
	public PermissionFeatures(PackageManager packageManager) {
		_wh = WekaHelper.getInstance();
		_attributes = new ArrayList<Attribute>();
		
		// Create the feature vector
		_attributes.add(new Attribute("permissions"));
		
		_packageManager = packageManager;
	}
	
	public Instance getInstance() {
		fetchData();
		
		_wh.resetAttributes(_attributes);
		
		_instance = new DenseInstance(_attributes.size());
		_instance.setValue(_attributes.get(0), _permissions);
		
		return _instance;
	}

	public void fetchData() {
		if (_permissions != 0) {
			return;
		}
		
		//TODO: This number is high because it's also including system
		// applications running in the foreground.
		for(RunningAppProcessInfo appProcess : _processes){
		    if(appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND){
		        _permissions += _getPermissions(appProcess.pkgList);
		    }
		}
	}
	
	/**
	 * @param appPackages The array of packages to check.
	 * @return The total number of requested permissions.
	 */
	private int _getPermissions(String[] appPackages) {
		int permissions = 0;
		
		for (String appPackage : appPackages) {
		    try {
				PackageInfo info = _packageManager.getPackageInfo(
				    appPackage, 
				    PackageManager.GET_PERMISSIONS);
				permissions += info.requestedPermissions.length;
			} catch (Exception e) {
				// Don't do anything
			}
		}
		return permissions;
	}
	
	/**
	 * Sets the global process list and reverts the
	 * permissions to 0. If the same object is passed
	 * into this method, nothing happens.
	 */
	public void setProcesses(List<RunningAppProcessInfo> processes) {
		if (_processes != processes) {
			_processes = processes;
			_permissions = 0;
		}
	}

	public ArrayList<Attribute> getAttributes() {
		return _attributes;
	}
	
}
